#!/usr/bin/env bash

# Created by Uğur "vigo" Özyılmazel,
# feel free to add/change or implement more kool features
# @vigobronx

git_repo_path=$(git rev-parse --git-dir 2>/dev/null)

function in_git_repo {
    if [[ ! -z $git_repo_path && $git_repo_path != "~" && $git_repo_path != "." && $git_repo_path != $HOME/.git ]]; then
        return 0
    fi
    return 1
}


function git_parse_branch {
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [[ $branch == "HEAD" ]]; then
        tag=$(git describe --tag 2>/dev/null)
        if [[ -z $tag ]]; then
            echo "no branch"
        else
            echo "${tag}"
        fi
    else
        echo "${branch}"
    fi
}


function any_rebasing {
    if [[ -f $git_repo_path/BISECT_LOG ]]; then
        echo "+bisect"
    elif [[ -f $git_repo_path/MERGE_HEAD ]]; then
        echo "+merge"
    elif [[ -f $git_repo_path/rebase || -f $git_repo_path/rebase-apply || -f $git_repo_path/rebase-merge ]]; then
        echo "+rebase"
    fi
}


function commit_position {
    branch=$(git_parse_branch)
    current_status=$(eval "git branch -v | grep '* $branch' 2>/dev/null")
    if [[ $current_status =~ (behind|ahead) ]]; then
        output=""
        ahead_ptrn="ahead ([0-9]+)"
        behind_ptrn="behind ([0-9]+)"
        if [[ "${current_status}" =~ $ahead_ptrn ]]; then
            output=" ${output}\xE2\x86\x92${BASH_REMATCH[1]}"
        fi
        if [[ "${current_status}" =~ $behind_ptrn ]]; then
            output="${output} ${BASH_REMATCH[1]}\xE2\x86\x90"
        fi
        echo -e "${output}"
    fi
}


typeset -a DIRTY_TABLE
DIRTY_TABLE=(
    "T"    "\xE2\x9A\x91"  # typechange
    "??"   "\xE2\x98\x90"  # untracked
    "R"    "\xE2\x9C\x8E"  # renamed
    "D"    "\xE2\x8C\xAB"  # deleted
    "M"    "\xE2\x9C\x8D"  # modified
)
DIRTY_TABLE_COUNT=${#DIRTY_TABLE[*]}
function cwd_anything_changed {
    for ((i=0; i<=$((($DIRTY_TABLE_COUNT/2)-1)); i++)); do
        grep_text="${DIRTY_TABLE[(0+($i*2))]}"
        icon="${DIRTY_TABLE[(1+($i*2))]}"
        cf_count=$(git status -s 2>/dev/null | grep "${grep_text}" | wc -l | tr -d " ")
        if [[ $cf_count > 0 ]]; then
            printf " (${icon} ${cf_count})"
        fi
    done
}


if [[ $(command -v git) ]]; then
    if in_git_repo; then
        branch=$(git_parse_branch)
        commit_id=$(git rev-parse --short HEAD 2>/dev/null)
        rebasing=$(any_rebasing)
        anything_changed=$(cwd_anything_changed)
        ahead_behind=$(commit_position)
        branch_color="$(tput setaf 2)${branch}$(tput sgr0)"
        at_color="$(tput setaf 7)@$(tput sgr0)"
        
        echo "[${branch_color}${at_color}${commit_id}${rebasing}${anything_changed}${ahead_behind}]"
    fi
fi


