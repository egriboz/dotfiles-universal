# Python Http Server
# ----------------------------------------------------------------------------
# via @paul_irish | fixed by @vigobronx
function webserver() {
    if [[ $1 == "-h" || $1 == "--help" ]]; then
        echo "Simple, http static html server via Python."
        echo "Usage:"
        echo -e "\twebserver PORT"
        echo -e "\twebserver # default port is 8000"
        echo
        echo "-h, --help: help"
        echo
        return 0
    fi
    local port="${1:-8000}"
    # open "http://localhost:${port}/"
    python -m SimpleHTTPServer "$port"
    python -c $'import SimpleHTTPServer;\n
                map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\n
                map[""] = "text/plain";\n
                for key, value in map.items():\n\t
                map[key] = value + ";charset=UTF-8";\n
                SimpleHTTPServer.test();' "$port"
}
_server()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="8000 -h --help"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _server webserver -o nospace
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
function webserver_rb(){
    if [[ $1 == "-h" || $1 == "--help" ]]; then
        echo "Simple, http static html server via Ruby."
        echo "Usage:"
        echo -e "\twebserver_rb PORT"
        echo -e "\twebserver_rb # default port is 5000"
        echo
        echo "-h, --help: help"
        echo
        return 0
    fi
    local port="${1:-5000}"
    echo "Listening 127.0.0.1:${port}"
    ruby -run -e httpd . -p $port
}
_server_rb()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="5000 -h --help"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _server_rb webserver_rb -o nospace
# ----------------------------------------------------------------------------

# enable bash completion for printenv
# http://bashcookbook.com/bashinfo/source/bash-3.1/examples/complete/complete-examples
# ----------------------------------------------------------------------------
complete -e printenv
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# http://stackoverflow.com/a/18637593
# first call: git-add-push-all, this will generate .all remote, then
#
# git push all
# git-add-push-all() {
#     while read -r name url method; do
#         git config --add remote.all.url "$url"
#     done < <(git remote -v | awk '!/^all/ && /push/')
# }
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
function gz_analyse() {
    echo "orig size (bytes): "
    cat "$1" | wc -c
    echo "gzipped size (bytes): "
    gzip -c "$1" | wc -c
}
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
dataurl() {
    echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}
# ----------------------------------------------------------------------------